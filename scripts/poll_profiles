#!/usr/bin/env python
#
# Usage: python poll_profiles.py <profiles-glob> <enrichment-service-URI>

import sys, os, glob
import base64
import datetime, time
from urllib import urlencode
from amara.thirdparty import json, httplib2
from amara.lib.iri import is_absolute, join

def process_profile(out,profile_f):

    fprof = open(profile_f,'r')
    try:
        profile = json.load(fprof)
    except Exception as e:
        profile = None

    fprof.close()

    if not profile:
        print >> sys.stderr, 'Error reading source profile.'
        return False

    # Pause in secs between HTTP requests
    sleep = profile.get(u'sleep') or 0

    H = httplib2.Http('/tmp/.pollcache')
    H.force_exception_as_status_code = True
    subResources = profile[u'subresources'] or ['']
    for subr in subResources:

        # For now, a simplifying assumption that string concatenation produces a
        # full URI from the combination of the endpoint URL and each subresource id.
        # Better might be a single field listing all URIs but unclear how that extends
        # to other protocols.

        # If multiple requests are required to harvest all information from a resource, they will
        # give us 'resumption tokens' after each request until we are done. Passing the resumption
        # token will provide the next batch of results

        request_more, resumption_token = True, ""
        while request_more:
            endpoint = profile[u'endpoint_URL'] + subr
            if resumption_token:
                endpoint += '&' + urlencode({'resumption_token': resumption_token})
            print >> sys.stderr, endpoint

            resp, content = H.request(endpoint)
            if not resp[u'status'].startswith('2'):
                print >> sys.stderr, '  HTTP error ('+resp[u'status']+') resolving URL: ' + endpoint
                continue
            endpoint_content = json.loads(content)
            resumption_token = endpoint_content['resumption_token']

            # Enrich retrieved data
            headers = {
                "Content-Type": "application/json",
                "Pipeline-Coll": ','.join(profile["enrichments_coll"]),
                "Pipeline-Rec": ','.join(profile["enrichments_rec"]),
                "Source": profile['name'],
                "Collection": subr,
                "Contributor": base64.b64encode(json.dumps(profile.get(u'contributor',{})))
            }
            resp, content = H.request(out,'POST',body=content,headers=headers)
            if not str(resp.status).startswith('2'):
                print >> sys.stderr, '  HTTP error with enrichment service: '+repr(resp)

            request_more = resumption_token is not None and len(resumption_token) > 0

        time.sleep(sleep)

    # Update profile metadata and save
    profile[u'last_checked'] = datetime.datetime.now().isoformat()
    fprof = open(profile_f,'w')
    json.dump(profile,fprof,indent=4)
    fprof.close()

    return True

if __name__ == '__main__':

    # Verify that both given directories exist
    for d in sys.argv[1:]:
        if is_absolute(d): continue # skip URIs

        dirExists = False

        try:
            if os.stat(d): dirExists = True
        except:
            pass

        if not dirExists:
            print >> sys.stderr, 'Directory '+d+' does not exist. Aborting.'
            sys.exit(1)

    for profile in glob.glob(sys.argv[1]):
        print >> sys.stderr, 'Processing profile: '+profile
        process_profile(sys.argv[2], profile)
